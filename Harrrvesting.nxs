{"type":"group","name":"harrrvesting","enabled":true,"items":[{"type":"function","name":"onLoad","enabled":true,"code":"// Place any code here you'd like to autorun when the system is loaded\nharvesting_on = 0;\nrooms_harvested = [];\nextracting_on = 0;\nrooms_extracted = [];\nrift_max = 5000; // CHANGE ME!!!\nharvestQueue = [];\n\neventBus.unsubscribe('onPrompt', () => {\n  console.log('testEvent');\n});\n\neventBus.unsubscribe('onBal', 'runHarvestQueue');\n\nconst runHarvestQueue = function() {\n  if(harvestQueue[0]) {\n    send_command(harvestQueue[0]);\n    harvestQueue.shift();\n    send_command(\"inr all\");\n  }\n}\n\neventBus.subscribe('onBal', runHarvestQueue, 'runHarvestQueue');\n\neventBus.unsubscribe('roomMovementLook', 'clayOnMove');\n\nconst clayOnMove = function() {\n  var gather = get_variable(\"gatherclay\");\n  if(gather)\n\tsend_command(\"gather clay\");\n}\neventBus.subscribe('roomMovementLook', clayOnMove, 'clayOnMove');"},{"type":"function","name":"onGMCP","enabled":true,"code":"// Place any code here you'd like to run when a GMCP message is received\n// - The GMCP message is received as \"args.gmcp_method\" and \"args.gmcp_args\"\n\nif(args.gmcp_method == \"Room.Info\") {\n \ttype = args.gmcp_args.environment;\n  set_variable(\"roomType\", type);\n    roomNum = args.gmcp_args.num;\n    areaName = args.gmcp_args.area;\n    display_notice(args.gmcp_args.area, \"yellow\");\n    \n    // Removed - && players.length < 2\n    if(harvesting_on == 1) {\n        found = false;\n\n        rooms_harvested.forEach(function(index) {\n             if(roomNum == index) {\n                 found = true;\n             }\n        });\n        if(!found) {\n        \trooms_harvested.push(roomNum);\n\n     \t\tsend_command('harvest room', 0); \n        }\n    }\n    \n    if(extracting_on == 1 && (type == \"Natural underground\" || type == \"Constructed underground\" || type == \"Mountains\" || type==\"Magma Caves\")) {\n        display_notice(\"Extracting!\");\n        found = false;\n\n        rooms_extracted.forEach(function(index) {\n            if(roomNum == index) {\n                found = true;\n            }\n        });\n        if (!found) {\n            rooms_extracted.push(roomNum);\n            \n            if (extractTable[areaName]) {\n\n                send_command(\"extract \" + extractTable[areaName]);\n            }\n        }\n    }\n    \n}"},{"type":"trigger","name":"Room Info","enabled":false,"actions":[{"type":"highlight","enabled":true,"highlight_fg":"#ffff00","highlight_bg":"#000000","highlight":"line","highlight_backref":"1"}],"text":"You are unable to find any map information for room","matching":"substring","whole_words":false,"case_sensitive":false},{"type":"group","name":"Harvesting","enabled":true,"actions":[],"items":[{"type":"alias","name":"harvest-on","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nharvesting_on = 1;\ndisplay_notice(\"Harvesting on!\", \"red\");"}],"text":"harvest on","matching":"begins","whole_words":true,"case_sensitive":false,"prefix_suffix":true},{"type":"alias","name":"harvest-off","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nharvesting_on = 0;\ndisplay_notice(\"Harvesting off!\", \"red\");"}],"text":"harvest off","matching":"begins","whole_words":true,"case_sensitive":false,"prefix_suffix":true},{"type":"alias","name":"harvest-room","enabled":true,"actions":[{"type":"wait","enabled":true,"seconds":0,"milliseconds":"1"},{"type":"script","enabled":true,"script":"//Enter the script here\nvar roomType = get_variable(\"roomType\");\nswitch (roomType) {\n    case \"Forest\":\n        send_command(\"harvest forest123\");\n        break;\n    case \"Garden\":\n        send_command(\"harvest forest123\");\n        break;\n    case \"Jungle\":\n        send_command(\"harvest jungle\");\n        break;\n    case \"Grasslands\":\n        send_command(\"harvest grassland\");\n        break;\n    case \"Hills\":\n        send_command(\"harvest hills\");\n        break;\n    case \"Swamp\":\n        send_command(\"harvest swamp\");\n        break;\n    case \"Mountains\":\n        send_command(\"harvest mountain\");\n        break;\n    case \"Natural underground\":\n        send_command(\"harvest cave\");\n        break;\n    case \"Valley\":\n        send_command(\"harvest valley\");\n        break;\n    case \"Desert\":\n        send_command(\"harvest desert\");\n        break;\n    case \"Ocean\":\n        send_command(\"harvest water\");\n        break;\n    case \"River\":\n        send_command(\"harvest water\");\n        break;\n    case \"Freshwater\":\n        send_command(\"harvest water\");\n        break;\n}"}],"text":"harvest room","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"set-rift","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nrift_max = args[1];\ndisplay_notice(\"Maximum rift amount set: \" + rift_max, \"red\");"}],"text":"setrift (\\d+)","matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"harvest-jungle","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nif (GMCP.Rift.kuzu.amount < rift_max) {\n  harvestQueue.push(\"harvest kuzu\");\n}\nif (GMCP.Rift.kola.amount < rift_max) {\n  harvestQueue.push(\"harvest kola\");\n}\nif (GMCP.Rift.skullcap.amount < rift_max) {\n  harvestQueue.push(\"harvest skullcap\");\n}\nif (GMCP.Rift.fruit.amount < 2000) {\n  harvestQueue.push(\"gather fruit\");\n}\nif (GMCP.Rift.cacao.amount < 2000) {\n  harvestQueue.push(\"gather cacao\");\n}\neventBus.raise('onBal');"}],"text":"harvest jungle","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"harvest-forest","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nif (GMCP.Rift.echinacea.amount < rift_max) {\n    send_command(\"harvest echinacea\");\n} else {\n    send_command(\"echo Your rift is already filled with that\");\n}"},{"type":"waitfor","enabled":true,"text":"(That plant has been fully harvested.|You have recovered balance on all limbs.|Your rift is already filled with that)","matching":"regexp","whole_words":false,"case_sensitive":false,"expire":"10"},{"type":"script","enabled":true,"script":"//Enter the script here\nif (GMCP.Rift.ginseng.amount < rift_max) {\n    send_command(\"harvest ginseng\");\n} else {\n    send_command(\"echo Your rift is already filled with that\");\n}"},{"type":"waitfor","enabled":true,"text":"(That plant has been fully harvested.|You have recovered balance on all limbs.|Your rift is already filled with that)","matching":"regexp","whole_words":false,"case_sensitive":false,"expire":"10"},{"type":"script","enabled":true,"script":"//Enter the script here\nif (GMCP.Rift.ginger.amount < rift_max) {\n    send_command(\"harvest ginger\");\n} else {\n    send_command(\"echo Your rift is already filled with that\");\n}"},{"type":"waitfor","enabled":true,"text":"(That plant has been fully harvested.|You have recovered balance on all limbs.|Your rift is already filled with that)","matching":"regexp","whole_words":false,"case_sensitive":false,"expire":"10"},{"type":"script","enabled":true,"script":"//Enter the script \nif (GMCP.Rift.myrrh.amount < rift_max) {\n    send_command(\"harvest myrrh\");\n} else {\n    send_command(\"echo Your rift is already filled with that\");\n}"},{"type":"waitfor","enabled":true,"text":"(That plant has been fully harvested.|You have recovered balance on all limbs.|Your rift is already filled with that)","matching":"regexp","whole_words":false,"case_sensitive":false,"expire":"10"},{"type":"script","enabled":true,"script":"//Enter the script here\nif (GMCP.Rift.lobelia.amount < rift_max) {\n    send_command(\"harvest lobelia\");\n} else {\n    send_command(\"echo Your rift is already filled with that\");\n}"},{"type":"waitfor","enabled":true,"text":"(That plant has been fully harvested.|You have recovered balance on all limbs.|Your rift is already filled with that)","matching":"regexp","whole_words":false,"case_sensitive":false,"expire":"10"},{"type":"script","enabled":true,"script":"//Enter the script here\nif (GMCP.Rift.burdock.amount < 5000) {\n    send_command(\"harvest burdock\");\n} else {\n    send_command(\"echo Your rift is already filled with that\");\n}"},{"type":"waitfor","enabled":true,"text":"(That plant has been fully harvested.|You have recovered balance on all limbs.|Your rift is already filled with that)","matching":"regexp","whole_words":false,"case_sensitive":false,"expire":"10"},{"type":"script","enabled":true,"script":"//Enter the script here\nif (GMCP.Rift.elm.amount < rift_max) {\n    send_command(\"harvest elm\");\n} else {\n    send_command(\"echo Your rift is already filled with that\");\n}\n"},{"type":"waitfor","enabled":true,"text":"(That plant has been fully harvested.|You have recovered balance on all limbs.|Your rift is already filled with that)","matching":"regexp","whole_words":false,"case_sensitive":false,"expire":"10"},{"type":"command","enabled":true,"command":"inr all","prefix_suffix":true},{"type":"script","enabled":true,"script":"//Enter the script here"}],"text":"harvest forest","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"harvest-forest-new","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nif (GMCP.Rift.echinacea.amount < rift_max) {\n  harvestQueue.push(\"harvest echinacea\");\n}\nif (GMCP.Rift.ginger.amount < rift_max) {\n  harvestQueue.push(\"harvest ginger\");\n}\nif (GMCP.Rift.lobelia.amount < rift_max) {\n  harvestQueue.push(\"harvest lobelia\");\n}\nif (GMCP.Rift.ginseng.amount < rift_max) {\n  harvestQueue.push(\"harvest ginseng\");\n}\nif (GMCP.Rift.myrrh.amount < rift_max) {\n  harvestQueue.push(\"harvest myrrh\");\n}\nif (GMCP.Rift.elm.amount < rift_max) {\n  harvestQueue.push(\"harvest elm\");\n}\nif (GMCP.Rift.burdock.amount < rift_max) {\n  harvestQueue.push(\"harvest burdock\");\n}\nif (GMCP.Rift.nut.amount < 1000) {\n  harvestQueue.push(\"gather nuts\");\n}\neventBus.raise('onBal');"}],"text":"harvest forest123","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"harvest-grassland","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nif (GMCP.Rift.goldenseal.amount < rift_max) {\n\tharvestQueue.push(\"harvest goldenseal\");\n}\nif (GMCP.Rift.slipper.amount < rift_max) {\n\tharvestQueue.push(\"harvest slipper\");\n}\nif (GMCP.Rift.sugarcane.amount < 2000) {\n\tharvestQueue.push(\"gather sugarcane\");\n}\nif (GMCP.Rift.grain.amount < 2000) {\n\tharvestQueue.push(\"gather grain\");\n}\neventBus.raise('onBal');"}],"text":"harvest grassland","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"harvest-cave","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nif (GMCP.Rift.moss.amount < rift_max) {\n\tharvestQueue.push(\"harvest moss\");\n}\nif (GMCP.Rift.bloodroot.amount < rift_max) {\n\tharvestQueue.push(\"harvest bloodroot\");\n}\nif (GMCP.Rift.dust.amount < rift_max) {\n\tharvestQueue.push(\"gather dust\");\n}\nif (GMCP.Rift['lumic moss'].amount < rift_max) {\n\tharvestQueue.push(\"gather lumic\");\n}\neventBus.raise('onBal');"}],"text":"harvest cave","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"harvest-hills","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nif (GMCP.Rift.hawthorn.amount < rift_max) {\n  harvestQueue.push(\"harvest hawthorn\");\n}\nif (GMCP.Rift.bayberry.amount < rift_max) {\n  harvestQueue.push(\"harvest bayberry\");\n}\neventBus.raise('onBal');"}],"text":"harvest hills","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"harvest-mountain","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nif (GMCP.Rift.valerian.amount < rift_max) {\n\tharvestQueue.push(\"harvest valerian\");\n}\neventBus.raise('onBal');"}],"text":"harvest mountain","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"harvest-swamp","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nif (GMCP.Rift.cohosh.amount < rift_max) {\n\tharvestQueue.push(\"harvest cohosh\");\n}\nif (GMCP.Rift.bellwort.amount < rift_max) {\n\tharvestQueue.push(\"harvest bellwort\");\n}\nif (GMCP.Rift.ash.amount < rift_max) {\n\tharvestQueue.push(\"harvest ash\");\n}\neventBus.raise('onBal');"}],"text":"harvest swamp","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"harvest-water","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nif (GMCP.Rift.kelp.amount < rift_max) {\n\tharvestQueue.push(\"harvest kelp\");\n}\neventBus.raise('onBal');"}],"text":"harvest water","matching":"begins","whole_words":true,"case_sensitive":false,"prefix_suffix":true},{"type":"alias","name":"harvest-valley","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nif (GMCP.Rift.sileris.amount < rift_max) {\n  harvestQueue.push(\"harvest sileris\");\n}\nif (GMCP.Rift.olive.amount < 2000) {\n  harvestQueue.push(\"gather olive\");\n}\neventBus.raise('onBal');\n"}],"text":"harvest valley","matching":"begins","whole_words":true,"case_sensitive":false,"prefix_suffix":true},{"type":"alias","name":"harvest-desert","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nif (GMCP.Rift.pear.amount < rift_max) {\n\tharvestQueue.push(\"harvest pear\");\n}\neventBus.raise('onBal');"}],"text":"harvest desert","matching":"begins","whole_words":true,"case_sensitive":false,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nrooms_harvested = [];"}],"text":"harvest clear","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true}]},{"type":"group","name":"Extracting","enabled":true,"actions":[],"items":[{"type":"alias","name":"extract-on","enabled":true,"actions":[{"type":"notify","enabled":true,"notice":"Extracting on","notice_fg":"#ff0000","notice_bg":"#000000"},{"type":"script","enabled":true,"script":"//Enter the script here\nextracting_on = 1;\nextractTable = {\n  'Moghedu':\"bisemutum\",\n  'Manara Burrow':\"dolomite\",\n  'the Caverns of Nuskuwe':\"dolomite\",\n  \"the Island of Tuar\":\"magnesium\",\n  \"The Digsite of the Soul\":'plumbum',\n  \"The Digsite of Waves\":'realgar',\n  \"New Thera\":'ferrum',\n  \"the Isle of Polyargos\":'magnesium',\n  \"the Mirror Caves\":'aurum',\n  \"Hashan\":'realgar',\n  \"the Siroccian Mountains\":'calcite',\n  \"a Dwarven camp\":'malachite',\n  \"an Orcish outpost\":'malachite',\n  \"the Sunderlands\":'plumbum',\n  \"Mainad har'bain\":'plumbum',\n  \"Judgement Mountain\":'arsenic',\n  \"the Central Vasnari Mountains\":'arsenic',\n  \"the Northern Vasnari Mountains\":'calcite',\n  \"Shastaan\":'magnesium', \n  \"the Eastern Shore\":'stannum',\n  \"a filthy goblin village\":'stannum',\n  \"the Mhojave Desert\":'stannum',\n  \"the Village of Tomacula\":'antimony',\n  \"the Chapel of All Gods\":'antimony',\n  \"the Dungeon of the Beastlords\":'gypsum',\n  \"a network of caves beneath New Thera\":'aurum',\n  \"the Den of the Quisalis\":'gypsum',\n  \"the Sarave Foothills\":'antimony',\n  \"Squall Cleft\":'quicksilver',\n  \"the Asterian Peninsula\":'antimony',\n  \"Sparrow's Rest\":'antimony',\n  \"The Digsite of Equilibrium\":'antimony',\n  \"the Island off the Northern Vashnars\":'argentum',\n  \"the Halls of Blackrock\":'aurum', \n  \"the Caves of Delmarin\":'dolomite',\n  \"the village of Tasur'ke\":'calamine',\n  \"the Vashnar Mountains\":'malachite',\n  \"the Savannah\":'azurite', \n  \"the Southern Vashnar Mountains\":'malachite',\n  \"the Ilyrean Tundra\":'calamine', \n  \"The Digsite of Rage\":'magnesium',\n  \"The Digsite of the Mind\":'ferrum', \n  \"Maim's Mansion\":'ferrum',\n  \"The Digsite of War\":'stannum', \n  \"the Thraasi Foothills\":'calamine',\n  \"the Valho Coast\":'calamine', \n  \"the Shamtota Hills\":'potash',\n  \"The Digsite of Discord\":'argentum',\n  \"Inbhir Ness\":'potash',\n  \"Wegava Valley\":'azurite',\n  \"the Village of Milena\":'antimony', \n  \"the Northreach Forest\":'cuprum',\n  \"the Granite Hills\":'ferrum'\n};\n// set_variable(\"extractTable\", extractables);"}],"text":"extract on","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"extract-off","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nextracting_on = 0;"},{"type":"notify","enabled":true,"notice":"Extracting off","notice_fg":"#ff0000","notice_bg":"#000000"},{"type":"variable","enabled":true,"valtype":"variable","value":"","op":"del"}],"text":"extract off","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"alias","name":"Where","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nvar extractables = get_variable(\"extractTable\");\nvar locations;\nvar mineral = args[1];\n\ndisplay_notice(mineral + \" can be found at: \", \"red\");\nextractables.forEach(function(el) {\n    if(el(1)==mineral) {\n        display_notice(mineral + \": \" + el, \"yellow\");\n    }\n});"}],"text":"extractwhere (\\w+)","matching":"regexp","whole_words":true,"case_sensitive":false,"prefix_suffix":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nvar test = [];\nset_variable(\"rooms_extracted\", test);"}],"text":"extract clear","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true}]},{"type":"trigger","name":"Reset","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\ndisplay_notice(\"Harvesting & Extracting RESET\", \"red\");\nrooms_harvested = [];\nvar test = [];\nset_variable(\"rooms_extracted\", test);"}],"text":"^It is now the (.*) years after the fall of the Seleucarian Empire.$","matching":"regexp","whole_words":true,"case_sensitive":true},{"type":"alias","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nvar gather = get_variable(\"gatherclay\");\n\nif(gather) {\n  set_variable(\"gatherclay\", false);\n  display_notice(\"Clay Gathering OFF\");\n} else {\n  set_variable(\"gatherclay\", true);\n  display_notice(\"Clay Gathering ON\");\n}"}],"text":"gatherclay","matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\neventBus.raise(\"onBal\");"}],"text":"That plant has been fully harvested.","matching":"substring","whole_words":true,"case_sensitive":true},{"type":"trigger","name":"","enabled":true,"actions":[{"type":"script","enabled":true,"script":"//Enter the script here\nconst mineral = args[2];\nconst amount = args[1];\n\ndisplay_notice(\"[\", \"white\", \"\", \"EXTRACT\", \"yellow\", \"\", \"]: \", \"white\", \"\", mineral, \"green\", \"\", \" - \", \"white\", \"\", amount, \"green\", \"\");"}],"text":"You kneel and collect chunks of earth, using a strong-smelling solvent to pull a group of (\\d+) (\\w+) motes from the dirt and rock. This delicate process completed, you set the minerals aside to dry.","matching":"regexp","whole_words":true,"case_sensitive":true}],"description":"Argwin's Harvesting Package"}